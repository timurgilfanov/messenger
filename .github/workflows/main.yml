name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
    paths:
      - 'app/**'
      - 'build.gradle.kts'
      - 'gradle/**'
      - '.github/workflows/main.yml'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    permissions:
      contents: read
      checks: write # required for mikepenz/action-junit-report

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha || github.event.before }}
          head: ${{ github.event.pull_request.head.sha || github.sha }}
          extra_args: --results=verified,unknown

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Lint
        run: ./gradlew lintDebug &> lint.log
        
      - name: Run Detekt
        id: detekt
        run: ./gradlew detekt
        continue-on-error: true

      - name: Upload Lint Log
        uses: actions/upload-artifact@v4
        with:
          name: lint-log
          path: lint.log

      - name: Upload Detekt Report
        uses: actions/upload-artifact@v4
        with:
          name: detekt-report
          path: app/build/reports/detekt/detekt.html
          
      - name: Fail if Detekt found issues
        if: steps.detekt.outcome != 'success'
        run: |
          echo "Detekt found issues. See the uploaded report for details."
          exit 1

      - name: Run Architecture Tests
        run: ./gradlew testDebugUnitTest -PtestCategory=timur.gilfanov.annotations.Architecture

      - name: Upload Architecture Test Report
        uses: actions/upload-artifact@v4
        with:
          name: architecture-test-report
          path: app/build/reports/tests/testDebugUnitTest

      - name: Publish Architecture Test Results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: app/build/test-results/testDebugUnitTest/*.xml
          check_name: "Architecture Test Results"

      - name: Build Debug and AndroidTest APKs
        run: ./gradlew -Pcoverage assembleDebug assembleDebugAndroidTest

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Upload AndroidTest APK
        uses: actions/upload-artifact@v4
        with:
          name: androidtest-apk
          path: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

      - name: Upload Kotlin class files
        uses: actions/upload-artifact@v4
        with:
          name: kotlin-classfiles
          path: app/build/tmp/kotlin-classes/debug

  unit-component-tests:
    needs: build

    permissions:
      checks: write # required for mikepenz/action-junit-report
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug

      - name: Run Unit Tests
        id: run_unit_tests
        continue-on-error: true
        run: |
          ./gradlew testDebugUnitTest -PtestCategory=timur.gilfanov.annotations.Unit -Pcoverage | tee unit-test.log
          EXIT=${PIPESTATUS[0]}
          [ $EXIT -eq 0 ] || cat unit-test.log
          exit $EXIT
          
      - name: Upload Unit Test Report
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: app/build/reports/tests/testDebugUnitTest
          
      - name: Publish Unit Test Results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: app/build/test-results/testDebugUnitTest/*.xml
          check_name: "Unit Test Results"
          
      - name: Run Component Tests
        id: run_component_tests
        continue-on-error: true
        run: |
          ./gradlew testDebugUnitTest -PtestCategory=timur.gilfanov.annotations.Component -Pcoverage | tee component-test.log
          EXIT=${PIPESTATUS[0]}
          [ $EXIT -eq 0 ] || cat component-test.log
          exit $EXIT

      - name: Upload Component Test Report
        uses: actions/upload-artifact@v4
        with:
          name: component-test-report
          path: app/build/reports/tests/testDebugUnitTest

      - name: Publish Component Test Results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: app/build/test-results/testDebugUnitTest/*.xml
          check_name: "Component Test Results"
          
      - name: Fail if Unit or Component Tests Failed
        if: steps.run_unit_tests.outcome != 'success' || steps.run_component_tests.outcome != 'success'
        run: |
          echo "❌ Unit or component tests failed. See the uploaded reports for details."
          exit 1

      - name: Generate Unit Coverage Report
        run: |
          ./gradlew koverXmlReportDebug
          ./gradlew generateCategorySpecificReports -PtestCategory=timur.gilfanov.annotations.Unit

      - name: Upload Unit Coverage to Codecov (Unit)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: app/build/reports/kover/unit-report.xml
          flags: unit
          fail_ci_if_error: true
          
      - name: Upload Unit Coverage to Codecov (Local)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: app/build/reports/kover/unit-report.xml
          flags: local
          fail_ci_if_error: true

      - name: Generate Component Coverage Report
        run: |
          ./gradlew koverXmlReportDebug
          ./gradlew generateCategorySpecificReports -PtestCategory=timur.gilfanov.annotations.Component

      - name: Upload Component Coverage to Codecov (Component)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: app/build/reports/kover/component-report.xml
          flags: component
          fail_ci_if_error: true
          
      - name: Upload Component Coverage to Codecov (Robolectric)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: app/build/reports/kover/component-report.xml
          flags: robolectric
          fail_ci_if_error: true

      - name: Upload Kover Unit and Component XML Report
        uses: actions/upload-artifact@v4
        with:
          name: unit-component-report
          path: app/build/reports/kover/reportDebug.xml

  feature-tests:
    if: github.event_name == 'pull_request'
    needs: build

    permissions:
      checks: write # required for mikepenz/action-junit-report
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Feature Tests
        id: run_feature_tests
        continue-on-error: true
        run: |
          ./gradlew testDebugUnitTest -PtestCategory=timur.gilfanov.annotations.Feature -Pcoverage | tee feature-test.log
          EXIT=${PIPESTATUS[0]}
          [ $EXIT -eq 0 ] || cat feature-test.log
          exit $EXIT

      - name: Upload Feature Test Report
        uses: actions/upload-artifact@v4
        with:
          name: feature-test-report
          path: app/build/reports/tests/testDebugUnitTest

      - name: Publish Feature Test Results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: app/build/test-results/testDebugUnitTest/*.xml
          check_name: "Feature Test Results"

      - name: Fail if Feature Tests Failed
        if: steps.run_feature_tests.outcome != 'success'
        run: |
          echo "❌ Feature tests failed. See the uploaded report for details."
          exit 1

      - name: Generate Feature Coverage Report
        run: |
          ./gradlew koverXmlReportDebug
          ./gradlew generateCategorySpecificReports -PtestCategory=timur.gilfanov.annotations.Feature

      - name: Upload Feature Coverage to Codecov (Feature)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: app/build/reports/kover/feature-report.xml
          flags: feature
          fail_ci_if_error: true
          
      - name: Upload Feature Coverage to Codecov (Local)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: app/build/reports/kover/feature-report.xml
          flags: local
          fail_ci_if_error: true

  application-tests-emulator:
    if: github.event_name == 'pull_request'
    needs: build

    permissions:
      checks: write # required for mikepenz/action-junit-report
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug

      - name: Download AndroidTest APK
        uses: actions/download-artifact@v4
        with:
          name: androidtest-apk
          path: app/build/outputs/apk/androidTest/debug

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run Application Instrumentation Tests on Emulators
        run: |
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/debug/app-debug.apk \
            --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=Pixel2.arm,version=30 \
            --timeout 5m \
            --environment-variables coverage=true,coverageFile=/sdcard/Download/coverage.ec,testCategory=timur.gilfanov.messenger.Application \
            --results-dir="${{ env.RESULTS_DIR }}" 2>&1 | tee emulator-run.log

      - name: Upload Application Emulator Test Log
        uses: actions/upload-artifact@v4
        with:
          name: application-emulator-test-log
          path: emulator-run.log

      - name: Extract Firebase Results Path
        id: extract-results
        run: |
          CONSOLE_URL=$(grep 'Raw results will be stored in' emulator-run.log | awk '{print $NF}' | tr -d '[]')
          if [ -z "$CONSOLE_URL" ]; then
            echo "❌ Failed to extract CONSOLE_URL from emulator-run.log"; exit 1
          fi
          # Convert to gs:// URL
          BUCKET_PATH=$(echo "$CONSOLE_URL" | sed 's|https://console.developers.google.com/storage/browser/|gs://|')
          if [ -z "$BUCKET_PATH" ]; then
            echo "❌ Failed to convert CONSOLE_URL to BUCKET_PATH"; exit 1
          fi
          echo "RESULTS_URL=$BUCKET_PATH" >> "$GITHUB_ENV"
          echo "✅ RESULTS_URL set to $BUCKET_PATH"

      - name: Download results from Firebase Test Lab
        run: |
          if [ -z "$RESULTS_URL" ]; then
            echo "❌ RESULTS_URL is not set"; exit 1
          fi
          mkdir -p emulator-testlab-results
          gsutil -m cp -r $RESULTS_URL emulator-testlab-results/        

      - name: Sanitize all subdirectory names to remove colons
        run: |
          for dir in emulator-testlab-results/*; do
            base=$(basename "$dir")
            safe=$(echo "$base" | tr ':' '_')
            if [ "$base" != "$safe" ]; then
              mv "emulator-testlab-results/$base" "emulator-testlab-results/$safe"
            fi
          done
          
      - name: Update RESULTS_DIR after sanitizing
        run: |
          SAFE_RESULTS_DIR=$(echo "${RESULTS_DIR}" | tr ':' '_')
          echo "RESULTS_DIR=$SAFE_RESULTS_DIR" >> $GITHUB_ENV
          
      # Needs sanitized path without colons
      - name: Upload Application Emulator Test Report
        uses: actions/upload-artifact@v4
        with:
          name: application-emulator-test-results
          path: emulator-testlab-results/
          
      - name: Publish Application Emulator Test Results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: emulator-testlab-results/${{ env.RESULTS_DIR }}/**/*.xml
          check_name: "Application Instrumentation Test Results (Emulator)"

      - name: Download Kover CLI for emulator coverage
        run: |
          curl -L -o kover-cli.jar \
            https://repo1.maven.org/maven2/org/jetbrains/kotlinx/kover-cli/0.9.1/kover-cli-0.9.1.jar

      - name: Download Kotlin class files for emulator coverage
        uses: actions/download-artifact@v4
        with:
          name: kotlin-classfiles
          path: app/build/tmp/kotlin-classes/debug

      - name: Generate Emulator Device-Specific Coverage Reports
        run: |
          # Create directory for device-specific coverage reports
          mkdir -p device-coverage-reports
          
          # Generate emulator coverage report 
          PHONE_COVERAGE_FILES=$(find emulator-testlab-results/${{ env.RESULTS_DIR }} \
                                 -path "*/artifacts/sdcard/Download/coverage.ec" \
                                 -print0 | xargs -0)
          if [ -n "$PHONE_COVERAGE_FILES" ]; then
            echo "Generating emulator coverage report..."
            java -jar kover-cli.jar report $PHONE_COVERAGE_FILES \
              --classfiles app/build/tmp/kotlin-classes/debug \
              --src app/src/main \
              --excludeAnnotation androidx.compose.runtime.Composable \
              --xml device-coverage-reports/application-emulator-phone-report.xml
          fi        

      - name: Upload Application Emulator Phone Coverage to Codecov (application)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/application-emulator-phone-report.xml
          flags: application
          fail_ci_if_error: true

      - name: Upload Application Emulator Phone Coverage to Codecov (emulator)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/application-emulator-phone-report.xml
          flags: emulator
          fail_ci_if_error: true

      - name: Upload Application Emulator Phone Coverage to Codecov (phone)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/application-emulator-phone-report.xml
          flags: phone
          fail_ci_if_error: true

  application-tests-devices:
    if: github.ref == 'refs/heads/main'
    needs: build

    permissions:
      checks: write # required for mikepenz/action-junit-report
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug

      - name: Download AndroidTest APK
        uses: actions/download-artifact@v4
        with:
          name: androidtest-apk
          path: app/build/outputs/apk/androidTest/debug

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run Application Tests on Devices
        run: |
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/debug/app-debug.apk \
            --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=MediumPhone.arm,version=30 \
            --device model=MediumPhone.arm,version=33 \
            --device model=felix,version=33 \
            --timeout 5m \
            --environment-variables coverage=true,coverageFile=/sdcard/Download/coverage.ec,testCategory=timur.gilfanov.messenger.Application \
            --directories-to-pull /sdcard/Download \
            --results-dir="${{ env.RESULTS_DIR }}" 2>&1 | tee run.log

      - name: Upload Application Test Run Log
        uses: actions/upload-artifact@v4
        with:
          name: application-test-devices-run-log
          path: run.log

      - name: Extract Firebase Results Path
        id: extract-results
        run: |
          CONSOLE_URL=$(grep 'Raw results will be stored in' run.log | awk '{print $NF}' | tr -d '[]')
          if [ -z "$CONSOLE_URL" ]; then
            echo "❌ Failed to extract CONSOLE_URL from run.log"; exit 1
          fi
          # Convert to gs:// URL
          BUCKET_PATH=$(echo "$CONSOLE_URL" | sed 's|https://console.developers.google.com/storage/browser/|gs://|')
          if [ -z "$BUCKET_PATH" ]; then
            echo "❌ Failed to convert CONSOLE_URL to BUCKET_PATH"; exit 1
          fi
          echo "RESULTS_URL=$BUCKET_PATH" >> "$GITHUB_ENV"
          echo "✅ RESULTS_URL set to $BUCKET_PATH"

      - name: Download results from Firebase Test Lab
        run: |
          if [ -z "$RESULTS_URL" ]; then
            echo "❌ RESULTS_URL is not set"; exit 1
          fi
          mkdir -p testlab-results
          gsutil -m cp -r $RESULTS_URL testlab-results/

      - name: Publish Application Test Results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: testlab-results/${{ env.RESULTS_DIR }}/**/*.xml
          check_name: "Application Test Results (Devices)"

      - name: Download Kotlin class files
        uses: actions/download-artifact@v4
        with:
          name: kotlin-classfiles
          path: app/build/tmp/kotlin-classes/debug

      - name: Download Kover CLI
        run: |
          curl -L -o kover-cli.jar \
            https://repo1.maven.org/maven2/org/jetbrains/kotlinx/kover-cli/0.9.1/kover-cli-0.9.1.jar

      - name: Generate Device-Specific Coverage Reports
        run: |
          # Create directory for device-specific coverage reports
          mkdir -p device-coverage-reports
          
          # Generate phone coverage report (MediumPhone devices)
          PHONE_COVERAGE_FILES=$(find testlab-results/${{ env.RESULTS_DIR }} \
                                 -path "*MediumPhone*" \
                                 -path "*/artifacts/sdcard/Download/coverage.ec" \
                                 -print0 | xargs -0)
          if [ -n "$PHONE_COVERAGE_FILES" ]; then
            echo "Generating phone coverage report..."
            java -jar kover-cli.jar report $PHONE_COVERAGE_FILES \
              --classfiles app/build/tmp/kotlin-classes/debug \
              --src app/src/main \
              --excludeAnnotation androidx.compose.runtime.Composable \
              --xml device-coverage-reports/application-device-phone-report.xml
          fi
          
          # Generate foldable coverage report (Pixel Fold)
          FOLDABLE_COVERAGE_FILES=$(find testlab-results/${{ env.RESULTS_DIR }} \
                                    -path "*felix*" \
                                    -path "*/artifacts/sdcard/Download/coverage.ec" \
                                    -print0 | xargs -0)
          if [ -n "$FOLDABLE_COVERAGE_FILES" ]; then
            echo "Generating foldable coverage report..."
            java -jar kover-cli.jar report $FOLDABLE_COVERAGE_FILES \
              --classfiles app/build/tmp/kotlin-classes/debug \
              --src app/src/main \
              --excludeAnnotation androidx.compose.runtime.Composable \
              --xml device-coverage-reports/application-device-foldable-report.xml
          fi

      - name: Sanitize all subdirectory names to remove colons
        run: |
          for dir in testlab-results/*; do
            base=$(basename "$dir")
            safe=$(echo "$base" | tr ':' '_')
            if [ "$base" != "$safe" ]; then
              mv "testlab-results/$base" "testlab-results/$safe"
            fi
          done

      - name: Upload Application Test Report
        uses: actions/upload-artifact@v4
        with:
          name: application-test-devices-results
          path: testlab-results/

      - name: Upload Application Device Phone Coverage to Codecov (application)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/application-device-phone-report.xml
          flags: application
          fail_ci_if_error: true

      - name: Upload Application Device Phone Coverage to Codecov (device)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/application-device-phone-report.xml
          flags: device
          fail_ci_if_error: true

      - name: Upload Application Device Phone Coverage to Codecov (phone)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/application-device-phone-report.xml
          flags: phone
          fail_ci_if_error: true

      - name: Upload Application Device Foldable Coverage to Codecov (application)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/application-device-foldable-report.xml
          flags: application
          fail_ci_if_error: true

      - name: Upload Application Device Foldable Coverage to Codecov (device)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/application-device-foldable-report.xml
          flags: device
          fail_ci_if_error: true

      - name: Upload Application Device Foldable Coverage to Codecov (foldable)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/application-device-foldable-report.xml
          flags: foldable
          fail_ci_if_error: true

      - name: Upload Application Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: application-device-coverage-reports
          path: device-coverage-reports/

  release-candidate-tests:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build

    permissions:
      checks: write # required for mikepenz/action-junit-report
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Release APKs
        run: ./gradlew assembleRelease assembleReleaseAndroidTest

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run Release Candidate Tests
        run: |
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/release/app-release.apk \
            --test app/build/outputs/apk/androidTest/release/app-release-androidTest.apk \
            --device model=MediumPhone.arm,version=30 \
            --device model=MediumPhone.arm,version=33 \
            --device model=MediumPhone.arm,version=31 \
            --device model=MediumPhone.arm,version=29 \
            --device model=felix,version=33 \
            --device model=MediumTablet.arm,version=30 \
            --timeout 10m \
            --environment-variables coverage=true,coverageFile=/sdcard/Download/coverage.ec,testCategory=timur.gilfanov.messenger.ReleaseCandidate \
            --directories-to-pull /sdcard/Download \
            --results-dir="${{ env.RESULTS_DIR }}" 2>&1 | tee release-run.log

      - name: Upload Release Candidate Test Log
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate-test-log
          path: release-run.log

      - name: Extract Firebase Results Path
        id: extract-results
        run: |
          CONSOLE_URL=$(grep 'Raw results will be stored in' release-run.log | awk '{print $NF}' | tr -d '[]')
          if [ -z "$CONSOLE_URL" ]; then
            echo "❌ Failed to extract CONSOLE_URL from release-run.log"; exit 1
          fi
          # Convert to gs:// URL
          BUCKET_PATH=$(echo "$CONSOLE_URL" | sed 's|https://console.developers.google.com/storage/browser/|gs://|')
          if [ -z "$BUCKET_PATH" ]; then
            echo "❌ Failed to convert CONSOLE_URL to BUCKET_PATH"; exit 1
          fi
          echo "RESULTS_URL=$BUCKET_PATH" >> "$GITHUB_ENV"
          echo "✅ RESULTS_URL set to $BUCKET_PATH"

      - name: Download results from Firebase Test Lab
        run: |
          if [ -z "$RESULTS_URL" ]; then
            echo "❌ RESULTS_URL is not set"; exit 1
          fi
          mkdir -p release-testlab-results
          gsutil -m cp -r $RESULTS_URL release-testlab-results/

      - name: Publish Release Candidate Test Results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: release-testlab-results/${{ env.RESULTS_DIR }}/**/*.xml
          check_name: "Release Candidate Test Results"

      - name: Download Kover CLI
        run: |
          curl -L -o kover-cli.jar \
            https://repo1.maven.org/maven2/org/jetbrains/kotlinx/kover-cli/0.9.1/kover-cli-0.9.1.jar

      - name: Download Kotlin class files
        uses: actions/download-artifact@v4
        with:
          name: kotlin-classfiles
          path: app/build/tmp/kotlin-classes/debug

      - name: Generate Release Candidate Device-Specific Coverage Reports
        run: |
          # Create directory for device-specific coverage reports
          mkdir -p device-coverage-reports
          
          # Generate phone coverage report
          PHONE_COVERAGE_FILES=$(find release-testlab-results/${{ env.RESULTS_DIR }} \
                                 -path "*MediumPhone*" \
                                 -path "*/artifacts/sdcard/Download/coverage.ec" \
                                 -print0 | xargs -0)
          if [ -n "$PHONE_COVERAGE_FILES" ]; then
            echo "Generating release candidate phone coverage report..."
            java -jar kover-cli.jar report $PHONE_COVERAGE_FILES \
              --classfiles app/build/tmp/kotlin-classes/debug \
              --src app/src/main \
              --excludeAnnotation androidx.compose.runtime.Composable \
              --xml device-coverage-reports/release-candidate-device-phone-report.xml
          fi
          
          # Generate tablet coverage report  
          TABLET_COVERAGE_FILES=$(find release-testlab-results/${{ env.RESULTS_DIR }} \
                                  -path "*MediumTablet*" \
                                  -path "*/artifacts/sdcard/Download/coverage.ec" \
                                  -print0 | xargs -0)
          if [ -n "$TABLET_COVERAGE_FILES" ]; then
            echo "Generating release candidate tablet coverage report..."
            java -jar kover-cli.jar report $TABLET_COVERAGE_FILES \
              --classfiles app/build/tmp/kotlin-classes/debug \
              --src app/src/main \
              --excludeAnnotation androidx.compose.runtime.Composable \
              --xml device-coverage-reports/release-candidate-device-tablet-report.xml
          fi
          
          # Generate foldable coverage report (Pixel Fold)
          FOLDABLE_COVERAGE_FILES=$(find release-testlab-results/${{ env.RESULTS_DIR }} \
                                    -path "*felix*" \
                                    -path "*/artifacts/sdcard/Download/coverage.ec" \
                                    -print0 | xargs -0)
          if [ -n "$FOLDABLE_COVERAGE_FILES" ]; then
            echo "Generating release candidate foldable coverage report..."
            java -jar kover-cli.jar report $FOLDABLE_COVERAGE_FILES \
              --classfiles app/build/tmp/kotlin-classes/debug \
              --src app/src/main \
              --excludeAnnotation androidx.compose.runtime.Composable \
              --xml device-coverage-reports/release-candidate-device-foldable-report.xml
          fi

      - name: Upload Release Candidate Phone Coverage to Codecov (release_candidate)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/release-candidate-device-phone-report.xml
          flags: release_candidate
          fail_ci_if_error: true

      - name: Upload Release Candidate Phone Coverage to Codecov (device)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/release-candidate-device-phone-report.xml
          flags: device
          fail_ci_if_error: true

      - name: Upload Release Candidate Phone Coverage to Codecov (phone)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/release-candidate-device-phone-report.xml
          flags: phone
          fail_ci_if_error: true

      - name: Upload Release Candidate Tablet Coverage to Codecov (release_candidate)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/release-candidate-device-tablet-report.xml
          flags: release_candidate
          fail_ci_if_error: true

      - name: Upload Release Candidate Tablet Coverage to Codecov (device)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/release-candidate-device-tablet-report.xml
          flags: device
          fail_ci_if_error: true

      - name: Upload Release Candidate Tablet Coverage to Codecov (tablet)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/release-candidate-device-tablet-report.xml
          flags: tablet
          fail_ci_if_error: true

      - name: Upload Release Candidate Foldable Coverage to Codecov (release_candidate)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/release-candidate-device-foldable-report.xml
          flags: release_candidate
          fail_ci_if_error: true

      - name: Upload Release Candidate Foldable Coverage to Codecov (device)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/release-candidate-device-foldable-report.xml
          flags: device
          fail_ci_if_error: true

      - name: Upload Release Candidate Foldable Coverage to Codecov (foldable)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: device-coverage-reports/release-candidate-device-foldable-report.xml
          flags: foldable
          fail_ci_if_error: true

      - name: Sanitize all subdirectory names to remove colons
        run: |
          for dir in release-testlab-results/*; do
            base=$(basename "$dir")
            safe=$(echo "$base" | tr ':' '_')
            if [ "$base" != "$safe" ]; then
              mv "release-testlab-results/$base" "release-testlab-results/$safe"
            fi
          done

      - name: Upload Release Candidate Test Report
        uses: actions/upload-artifact@v4
        with:
          name: release-candidate-test-results
          path: release-testlab-results/