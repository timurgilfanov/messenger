name: Main Branch Verification

on:
  push:
    branches: [ "main" ]
    paths:
      - 'app/**'
      - 'build.gradle.kts'
      - 'gradle/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'app/**'
      - 'build.gradle.kts'
      - 'gradle/**'
      - '.github/workflows/main.yml'

jobs:
  build:
    permissions:
      contents: read

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha || github.event.before }}
          head: ${{ github.event.pull_request.head.sha || github.sha }}
          extra_args: --results=verified,unknown

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Lint and Detekt in Parallel
        run: |
          ./gradlew lintDebug &> lint.log &
          ./gradlew detekt &> detekt.log &
          wait

      - name: Upload Lint Log
        uses: actions/upload-artifact@v4
        with:
          name: lint-log
          path: lint.log

      - name: Upload Detekt Report
        uses: actions/upload-artifact@v4
        with:
          name: detekt-report
          path: app/build/reports/detekt/detekt.html

      - name: Build Debug and AndroidTest APKs
        run: ./gradlew -Pcoverage assembleDebug assembleDebugAndroidTest

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Upload AndroidTest APK
        uses: actions/upload-artifact@v4
        with:
          name: androidtest-apk
          path: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

  unitTest:
    needs: build

    permissions:
      checks: write # required for mikepenz/action-junit-report
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug

      - name: Run Unit Tests
        run: |
          ./gradlew testDebugUnitTest | tee unit-test.log
          EXIT=${PIPESTATUS[0]}
          [ $EXIT -eq 0 ] || cat unit-test.log
          exit $EXIT

      - name: Upload Unit Test Report
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: app/build/reports/tests/testDebugUnitTest

      - name: Publish Unit Test Results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: app/build/test-results/testDebugUnitTest/*.xml
          check_name: "Unit Test Results"

      - name: Generate Kover XML Report
        run: ./gradlew koverXmlReport

      - name: Upload Kover Unit XML Report
        uses: actions/upload-artifact@v4
        with:
          name: unit-report
          path: app/build/reports/kover/report.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: app/build/reports/kover/report.xml
          flags: android_unit
          fail_ci_if_error: true

  androidTest:
    needs: build

    permissions:
      checks: write # required for mikepenz/action-junit-report
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug

      - name: Download AndroidTest APK
        uses: actions/download-artifact@v4
        with:
          name: androidtest-apk
          path: app/build/outputs/apk/androidTest/debug

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run Firebase Test Lab tests
        run: |
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/debug/app-debug.apk \
            --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=MediumPhone.arm,version=30 \
            --timeout 5m \
            --environment-variables coverage=true,coverageFile=/sdcard/Download/coverage.ec \
            --directories-to-pull /sdcard/Download \
            --results-dir="${{ env.RESULTS_DIR }}" 2>&1 | tee run.log

      - name: Upload Instrumented Test Run Log
        uses: actions/upload-artifact@v4
        with:
          name: firebase-testlab-run-log
          path: run.log

      - name: Extract Firebase Results Path
        id: extract-results
        run: |
          CONSOLE_URL=$(grep 'Raw results will be stored in' run.log | awk '{print $NF}' | tr -d '[]')
          if [ -z "$CONSOLE_URL" ]; then
            echo "❌ Failed to extract CONSOLE_URL from run.log"; exit 1
          fi
          # Convert to gs:// URL
          BUCKET_PATH=$(echo "$CONSOLE_URL" | sed 's|https://console.developers.google.com/storage/browser/|gs://|')
          if [ -z "$BUCKET_PATH" ]; then
            echo "❌ Failed to convert CONSOLE_URL to BUCKET_PATH"; exit 1
          fi
          echo "RESULTS_URL=$BUCKET_PATH" >> "$GITHUB_ENV"
          echo "✅ RESULTS_URL set to $BUCKET_PATH"

      - name: Download results from Firebase Test Lab
        run: |
          if [ -z "$RESULTS_URL" ]; then
            echo "❌ RESULTS_URL is not set"; exit 1
          fi
          mkdir -p testlab-results
          gsutil -m cp -r $RESULTS_URL testlab-results/

      - name: Download JaCoCo CLI
        run: |
          curl -L -o jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.11/org.jacoco.cli-0.8.11-nodeps.jar

      - name: Merge .ec files
        run: |
          mkdir -p merged-coverage
          EC_FILES=$(find testlab-results/${{ env.RESULTS_DIR }} -path "*/artifacts/sdcard/Download/coverage.ec")
          if [ -z "$EC_FILES" ]; then
            echo "❌ No coverage.ec files found."; exit 1
          fi
          java -jar jacococli.jar merge $EC_FILES --destfile merged-coverage/coverage.ec

      - name: Publish Instrumented Test Results
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: testlab-results/${{ env.RESULTS_DIR }}/**/*.xml
          check_name: "Instrumented Test Results"

      - name: Rebuild class files for JaCoCo
        run: ./gradlew assembleDebug

      - name: Generate JaCoCo XML Report from merged .ec
        run: |
          mkdir -p coverage-report
          java -jar jacococli.jar report merged-coverage/coverage.ec \
            --classfiles app/build/tmp/kotlin-classes/debug \
            --sourcefiles app/src/main \
            --xml coverage-report/instrumented-report.xml

      - name: Upload Instrumented Test Report
        uses: actions/upload-artifact@v4
        with:
          name: firebase-testlab-results
          path: testlab-results

      - name: Upload JaCoCo Instrumented XML Report
        uses: actions/upload-artifact@v4
        with:
          name: instrumented-report
          path: coverage-report/instrumented-report.xml

      - name: Upload Instrumented Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage-report/instrumented-report.xml
          flags: android_instrumented
          fail_ci_if_error: true